{"ast":null,"code":"// Requiring bcrypt for password hashing. Using the bcryptjs version as the regular bcrypt module sometimes causes errors on Windows machines\nvar bcrypt = require(\"bcrypt\"); // Creating our User model\n\n\nmodule.exports = function (sequelize, DataTypes) {\n  const Model = sequelize.define('User', {\n    // The email cannot be null, and must be a proper email before creation\n    id: {\n      type: DataTypes.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    firstname: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    lastname: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    email: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    password: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    gender: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    birthday: {\n      type: DataTypes.DATE,\n      allowNull: true\n    },\n    created: {\n      type: DataTypes.DATE,\n      defaultValue: sequelize.NOW\n    },\n    defaultValueBoolean: {\n      type: DataTypes.BOOLEAN,\n      allowNull: true,\n      defaultValue: '1'\n    },\n    updatedAt: {\n      type: DataTypes.DATE,\n      allowNull: false\n    }\n  });\n  return Model;\n}; // // Creating a custom method for our User model. This will check if an unhashed password entered by the user can be compared to the hashed password stored in our database\n// User.prototype.validPassword = function(password) {\n//   return bcrypt.compareSync(password, this.password);\n// };\n// // Hooks are automatic methods that run during various phases of the User Model lifecycle\n// // In this case, before a User is created, we will automatically hash their password\n// User.addHook(\"beforeCreate\", function(user) {\n//   user.password = bcrypt.hashSync(user.password, bcrypt.genSaltSync(10), null);\n// });","map":{"version":3,"sources":["/Users/mazinabed/Desktop/enki/models/user.js"],"names":["bcrypt","require","module","exports","sequelize","DataTypes","Model","define","id","type","INTEGER","allowNull","primaryKey","autoIncrement","firstname","STRING","lastname","email","password","gender","birthday","DATE","created","defaultValue","NOW","defaultValueBoolean","BOOLEAN","updatedAt"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,SAAT,EAAoBC,SAApB,EAA+B;AAC9C,QAAMC,KAAK,GAAGF,SAAS,CAACG,MAAV,CAAiB,MAAjB,EAAyB;AACrC;AACAC,IAAAA,EAAE,EAAE;AACFC,MAAAA,IAAI,EAAEJ,SAAS,CAACK,OAAV,CAAkB,EAAlB,CADJ;AAEFC,MAAAA,SAAS,EAAE,KAFT;AAGFC,MAAAA,UAAU,EAAE,IAHV;AAIFC,MAAAA,aAAa,EAAE;AAJb,KAFiC;AAQrCC,IAAAA,SAAS,EAAE;AACTL,MAAAA,IAAI,EAAEJ,SAAS,CAACU,MADP;AAETJ,MAAAA,SAAS,EAAE;AAFF,KAR0B;AAarCK,IAAAA,QAAQ,EAAE;AACRP,MAAAA,IAAI,EAAEJ,SAAS,CAACU,MADR;AAERJ,MAAAA,SAAS,EAAE;AAFH,KAb2B;AAkBrCM,IAAAA,KAAK,EAAE;AACLR,MAAAA,IAAI,EAAEJ,SAAS,CAACU,MADX;AAELJ,MAAAA,SAAS,EAAE;AAFN,KAlB8B;AAuBrCO,IAAAA,QAAQ,EAAE;AACRT,MAAAA,IAAI,EAAEJ,SAAS,CAACU,MADR;AAERJ,MAAAA,SAAS,EAAE;AAFH,KAvB2B;AA2BrCQ,IAAAA,MAAM,EAAE;AACNV,MAAAA,IAAI,EAAEJ,SAAS,CAACU,MADV;AAENJ,MAAAA,SAAS,EAAE;AAFL,KA3B6B;AAgCrCS,IAAAA,QAAQ,EAAE;AACRX,MAAAA,IAAI,EAAEJ,SAAS,CAACgB,IADR;AAERV,MAAAA,SAAS,EAAE;AAFH,KAhC2B;AAoCrCW,IAAAA,OAAO,EAAE;AACPb,MAAAA,IAAI,EAAEJ,SAAS,CAACgB,IADT;AAEPE,MAAAA,YAAY,EAAEnB,SAAS,CAACoB;AAFjB,KApC4B;AAwCrCC,IAAAA,mBAAmB,EAAE;AACnBhB,MAAAA,IAAI,EAAEJ,SAAS,CAACqB,OADG;AAEnBf,MAAAA,SAAS,EAAE,IAFQ;AAGnBY,MAAAA,YAAY,EAAE;AAHK,KAxCgB;AA6CrCI,IAAAA,SAAS,EAAE;AACTlB,MAAAA,IAAI,EAAEJ,SAAS,CAACgB,IADP;AAETV,MAAAA,SAAS,EAAE;AAFF;AA7C0B,GAAzB,CAAd;AAkDA,SAAOL,KAAP;AACD,CApDD,C,CAwDE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// Requiring bcrypt for password hashing. Using the bcryptjs version as the regular bcrypt module sometimes causes errors on Windows machines\nvar bcrypt = require(\"bcrypt\");\n// Creating our User model\n\nmodule.exports = function(sequelize, DataTypes) {\n  const Model = sequelize.define('User', {\n    // The email cannot be null, and must be a proper email before creation\n    id: {\n      type: DataTypes.INTEGER(11),\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    firstname: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n  \n    lastname: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    \n    email: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n  \n    password: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n    gender: {\n      type: DataTypes.STRING,\n      allowNull: true\n    },\n  \n    birthday: {\n      type: DataTypes.DATE,\n      allowNull: true\n    },\n    created: {\n      type: DataTypes.DATE,\n      defaultValue: sequelize.NOW\n    },\n    defaultValueBoolean: {\n      type: DataTypes.BOOLEAN,\n      allowNull: true,\n      defaultValue: '1'\n    },\n    updatedAt: {\n      type: DataTypes.DATE,\n      allowNull: false\n    }\n  });\n  return Model\n}\n  \n\n\n  // // Creating a custom method for our User model. This will check if an unhashed password entered by the user can be compared to the hashed password stored in our database\n  // User.prototype.validPassword = function(password) {\n  //   return bcrypt.compareSync(password, this.password);\n  // };\n  // // Hooks are automatic methods that run during various phases of the User Model lifecycle\n  // // In this case, before a User is created, we will automatically hash their password\n  // User.addHook(\"beforeCreate\", function(user) {\n  //   user.password = bcrypt.hashSync(user.password, bcrypt.genSaltSync(10), null);\n  // });\n"]},"metadata":{},"sourceType":"script"}